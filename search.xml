<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[推荐算法]]></title>
      <url>%2F2017%2F03%2F18%2F%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%2F</url>
      <content type="text"><![CDATA[推荐算法1一、基于内容content based引入item属性的ceontent based推荐==框架实现流程==： 输入items 1234正排表movieId1 战争、movieId2 喜剧、 内容分析 正排表 –&gt; 倒排表 1234倒排表战争 movieId1 、movieId3 。。。喜剧 movieId2 、movieId4 。。。 优缺点 无个性化 引入User属性的ceontent based推荐==框架实现流程==： 优缺点： ++马太效应++ 二、基于协同过滤collaboration Filtering三、实战之倒排表（基于content based） 分隔符^A的输入方法，ctrl+v–crtl+A 输入items： 123456789//音乐列表：id + name8920397333 王铮亮 时间都去哪了 《私人订制》插曲8920408333 Locked Out Of Heaven 音乐高清视频MV8920422333 影视-心上人啊快给我力量KTV（电影《神圣的使命》插曲8920491333 068_奥特曼8920492333 影视-幸福不会从天降KTV（电影《我们村里的年轻人》插8920527333 邓紫棋 GEM 2013 X.X.X. LIVE 演唱会 【全场高清】8920529333 067_外婆的澎湖湾8920588333 卓依婷-纸飞机 内容分析 step1： 对name进行中文分词、关键词提取，根据TF-IDF 1234567891011121314151617181920//利用jieba分词工具#encoding=utf-8import jiebaimport jieba.possegimport jieba.analyses = &quot;王铮亮 时间都去哪了 《私人订制》插曲&quot;for x, w in jieba.analyse.extract_tags(s, withWeight=True): print(&apos;%s %s&apos; % (x, w))// 输出----------------------------------------TF-IDF----------------------------------------铮亮 2.64150609428订制 2.1209681572插曲 1.94525807642私人 1.3649737576时间 0.815907926492 step2： 生成正排表 123456 8920397333 王铮亮 时间都去哪了 《私人订制》插曲 铮亮2.64150609428订制2.1209681572插曲1.94525807642私人1.3649737576时间0.815907926492 ... setp3： 生成倒排表 ==map-reduce思想==： 正排–&gt;倒排 123456789//map; token=关键词，map输出按toker排序print &apos;\t&apos;.join([token, music_name, weight])// 输出----------------------------------------铮亮 王铮亮 时间都去哪了 《私人订制》插曲 2.64150609428铮亮 音乐资讯、【720P】王铮亮Reno-迷悟MV(完整HD版) 1.32075304714。。。---------------------------------------- 123456789101112131415161718192021222324252627//reduce；相同token，按weight排序后，进行join起来def reducer_func(): cur_token = None m_list = [] for line in sys.stdin: ss = line.strip().split(&apos;\t&apos;) if len(ss) != 3: continue token = ss[0].strip() name = ss[1].strip() weight = float(ss[2].strip()) if cur_token == None: cur_token = token if cur_token != token: final_list = sorted(m_list, key=lambda x: x[1], reverse=True) print &apos;\t&apos;.join([cur_token, &apos;^A&apos;.join([&apos;^B&apos;.join([name_weight[0], str(name_weight[1])]) for name_weight in final_list])]) cur_token = token m_list = [] m_list.append((name, weight)) final_list = sorted(m_list, key=lambda x: x[1], reverse=True) print &apos;\t&apos;.join([cur_token, &apos;^A&apos;.join([&apos;^B&apos;.join([name_weight[0], str(name_weight[1])]) for name_weight in final_list])]) Results: 1234//关键词+关键词在不同歌曲中的TF-IDF值排序铮亮 王铮亮 时间都去哪了 《私人订制》插曲^B2.64150609428^A最新音乐资讯、【720P】王铮亮Reno-迷悟MV(完整HD版)^B1.32075304714私人 王铮亮 时间都去哪了 《私人订制》插曲^B1.3649737576^A解放 (电影《私人订制》主题曲)^B1.3649737576。。。 计算任意两个item之间的相似度得分 倒排表的物理意义： 不同的item被同一个token关联起来，且每一个item的分数代表着，该token所能决定该item的能力。分数越高，说明这个token越能代表这个item所要表达的含义。 因此，我们把相同token，关联起来的任意两个item的得分相乘，得到的便是这两个item的相似度了。 以上面两条倒排表记录，来做个例子： token1–&gt;==铮亮== item1–&gt;{ ++王==铮亮== 时间都去哪了 《私人订制》插曲++ } score1–&gt;2.64150609428 item2–&gt;{ ++最新音乐资讯、【720P】王==铮亮==Reno-迷悟MV(完整HD版)++ } score2–&gt;1.32075304714 那么item1 和 item2的相似度是score1*score2 token2： ==私人== 同理可计算： ++王铮亮 时间都去哪了 《==私==人订制》插曲++ ++解放 (电影《==私人==订制》主题曲)++ 相似度得分： 1.3649737576 1.3649737576 &lt; 2.64150609428 1.32075304714 因此根据分数排名可知： ++王铮亮 时间都去哪了 《私人订制》插曲++ 与 ++最新音乐资讯、【720P】王==铮亮==Reno-迷悟MV(完整HD版)++ 更为相似。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F17%2Fhello-world%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker-dev]]></title>
      <url>%2F2017%2F03%2F17%2Fdocker-dev%2F</url>
      <content type="text"><![CDATA[基于Docker的Windows/Mac开发环境搭建[toc] 目的本文目的: 介绍基本Docker使用方法 基于当前最火热容器技术(docker)简化日常工作 在Windows/Mac搭建可移植的开发环境，摒弃掉使用计算云虚拟机为开发环境 相关项目可做成Docker镜像，方便部署，同时方便新人快速构建开发环境 在Windows/Mac使用超低的资源(~50M)，运行完整的Linux环境 准备工作操作系统：Windows/Mac OS 准备软件: Xshell: http://sys.qiyi.domain/download/devel-tools/Xshell4.exe DockerToolsBox: http://sys.qiyi.domain/download/devel-tools/DockerToolbox.exe 开发环境搭建安装Docker客户端Windows: https://docs.docker.com/installation/windows Mac OS X: https://docs.docker.com/installation/mac 根据自己的系统安装完Docker Tools，执行 Docker Quickstart Terminal 会自动在Virtual Box创建基于内存的boot2docker虚拟机， 使用Xshell官方文档介绍使用Windows Shell和putty链接boot2docker虚拟机或者Docker实例，本部分介绍使用Xshell链接，因为Xshell相对更方便： 更方便管理ssh-key 更多快捷键 使用Virtual Box查看boot2docker虚拟机的ip地址，使用 %USERPROFILE%\.docker\machine\machines\&lt;name_of_your_machine&gt;\id_rsa 私钥在xshell用docker用户登陆，IP地址是192.168.99.100 。 进入虚拟机添加qiyi内部镜像源为可信任源： 修改 /var/lib/boot2docker/profile 添加下面信息 EXTRA_ARGS=&#39;--insecure-registry docker-registry.qiyi.virtual&#39; 然后可执行docker命令: 12345$ docker ps$ docker login $ docker search $ vi Dockerfile &amp;&amp; docker build -t &lt;your image name&gt; .# docker run ... 若登录失败，重启docker2boot，重试即可 创建开发环境Dockerfile拉取现有镜像docker pull /https://hub.docker.com/[your account]/centos-devenv:3.2 创建容器1$ docker run --name dev -i -t -v /c/Users/Administrator/workspace:/root/workspace -p 222:22 -p 8080:80 https://hub.docker.com/[your account]/centos-devenv:3.2 /bin/bash 此命令可创建并进入容器，显示shell终端，此时可在Windows系统copy key 到 /c/Users/Administrator/workspace，然后执行 123$ cp /root/workspace/id_rsa* /root/.ssh$ cat /root/.ssh/id_rsa.pub &gt;&gt;/root/.ssh/authorized_keys$ chmod 600 /root/.ssh/id_rsa 此时可以通过Xshell等客户端登陆Docker 容器了。 左键左键通过如下命令直接进入容器 $ docker exec -i -t &lt;container-name&gt; /bin/bash note: docker 开发容器是在Virtual Box虚拟机启动的，上面的命令将22端口映射到外面为222所以登陆时使用222端口. 创建启动脚本(/c/Users/Administrator/workspace/go.sh): 12345#!/bin/shcontainer_id=devdocker start $container_iddocker exec $container_id supervisord &gt;/dev/null 2&gt;&amp;1 &amp; 每次启动VM时，链接boot2docker虚拟机，即可执行下面命令启动之前的容器: sh /c/Users/Administrator/workspace/go.sh centos-devenv 开发环境说明目前组内 centos-devenv 环境是3.0版本有如下特性： [3.2] Updates C/C++ 开发环境 clang-format based 自动代码格式化配置 增加vim-snippets：各类语言的自动补全代码片段 完善: 使用tab 完成代码自动补全 修复之前编辑模式下左键不可用的问题 [2.1] Updates Add vim-go Plugin [2.0] Updates 完整的 python、go、java开发环境 vim插件: python go java 自动补全功能 python: 日常常用的开发库已经安装，可用pip freeze 查看 man 手册，相比1.0版本 增加了man 手册 用户需要用自己的账号配置~/.ssh/config ~/.gitconfig ，即可快速搭建完成开发环境 内置nginx、supervisord nginx /sshd 服务使用supervisord默认启动可使用ssh客户端链接终端开发 Tips时区问题修正时区 1$ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 清理 123$ docker ps --all|grep Exited|awk &apos;&#123;print $1&#125;&apos;|xargs docker rm$ docker images | grep &quot;^&lt;none&gt;&quot; | awk &apos;&#123;print $3&#125;&apos;|xargs docker rmi 参考资料官方资料Docker docs: https://docs.docker.com/ Dockerfile Reference: https://docs.docker.com/engine/reference/builder/ Best practises for writing Docker file: https://docs.docker.com/engine/articles/dockerfile_best-practices/ Using Supervisor with Docker: https://docs.docker.com/engine/articles/using_supervisord/]]></content>
    </entry>

    
  
  
</search>
